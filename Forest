# Libraries ----

library(sf)
library(raster)
library(terra)
library(purrr)
library(furrr)
library(ggridges)
library(tidyverse)

# Import data----

montesole <- stack("/home/alessio/Tirocinio/Foresta/montesole.tif") # stack o brick per importare piÃ¹ immagini o una sola immagine con diverse bande

buffer <- st_read("/home/alessio/Tirocinio/Foresta/buffer_c.shp")

foreste <- st_read("/home/alessio/Tirocinio/Foresta/AreeForestali2014BO.shp")


# Pre-processing ----

# Print the CRS of 'foreste' and 'buffer'

print(st_crs(foreste))
print(st_crs(buffer))

# If the CRS is not the same, you need to reproject one of them to match the other
# For example, if 'buffer' has a different CRS than 'foreste', you can reproject 'buffer' to the CRS of 'foreste'

foreste <- st_transform(foreste, crs = st_crs(buffer))


# Now, the CRS should be the same
print(st_crs(foreste))
print(st_crs(buffer))


# Check validity of geometries
print(st_is_valid(foreste))
print(st_is_valid(buffer))


# Fix invalid geometries
foreste <- st_make_valid(foreste)


# Crop foreste according to Monte Sole buffer
foreste <- st_intersection(foreste, buffer)


# Crop montesole tif according to Monte Sole buffer

montesole <- projectRaster(montesole, crs = crs(buffer)) # here we change the montesole crs to match with buffer crs

montesole <- crop(montesole, buffer)

montesole <- mask(montesole, buffer)


# Extract Values ----

df_montesole <- terra::extract(montesole, foreste, df = TRUE)

df_montesole$montesole_4 <- NULL  # remove useless column

colnames(df_montesole) <- c("ID", "Red", "Green", "Blue", "Species", "Management")  # modify column names


# Add columns with information from original forest chart polygons

unique(df_montesole$ID)     # check variable levels
unique(foreste$TIPO_CARTA)
unique(foreste$PRIMA_SP)

foreste$TIPO_CARTA <- as.factor(foreste$TIPO_CARTA) # transform variables into factors (not sure it is necessary)
foreste$PRIMA_SP <- as.factor(foreste$PRIMA_SP)
df_montesole$ID <- as.factor(df_montesole$ID)

df_montesole$specie <- foreste$PRIMA_SP[df_montesole$ID]  # add the new species column
df_montesole$management <- foreste$TIPO_CARTA[df_montesole$ID]  # add the management column

unique(df_montesole$specie) # check results
unique(df_montesole$management)


# Ridgeplots ----

# Ridgeplot on single spectral band

df_montesole %>%
  ggplot(aes(y = Species)) +
  geom_density_ridges(aes(x = Blue, fill = Management),
                      alpha = 0.8, color = "white") +
  labs(x = "Blue band reflectance",
       y = "Main species",
       title = "Blue band reflectance conditional on main species and forest management") +
  scale_x_continuous(expand = c(0, 0), limits = c(0, 150)) +
  scale_y_discrete(expand = expansion(mult = c(0.01, 0.25))) +
  coord_cartesian(clip = "off") +
  scale_fill_viridis_d(option = "mako") +
  theme_ridges(grid = T)


# Ridgeplot on multiple spectral bands:
# Stack columns bands into a single column: transform the dataframe from wide to long format

df_montesole_stacked <- df_montesole %>%
  pivot_longer(cols = c(Red, Green, Blue), names_to = "Band", values_to = "Reflectance") %>%
  arrange(ID) 


# Turn Band variable into a factor

df_montesole_stacked$Band <- as.factor(df_montesole_stacked$Band)


# free some memory if necessary

rm(df_montesole)


# Here the multi-band Ridgeplot

# According to management type

df_montesole_stacked %>%
  ggplot(aes(y = Management)) +
  geom_density_ridges(aes(x = Reflectance, fill = Band),
                      alpha = 0.8, color = "white") +
  labs(x = "Reflectance",
       y = "Forest management") +
  scale_x_continuous(expand = c(0, 0), limits = c(0, 180)) +
  scale_y_discrete(expand = expansion(mult = c(0.01, 0.25))) +
  scale_fill_manual(values = c("blue", "green", "red"), labels = c("Blue", "Green", "Red")) +
  coord_cartesian(clip = "off") +
  ggtitle("Difference in spectral bands reflectance conditional on forest management") +
  theme_ridges(center = T, grid = T)

# According to main species

df_montesole_stacked %>%
  ggplot(aes(y = Species)) +
  geom_density_ridges(aes(x = Reflectance, fill = Band),
                      alpha = 0.8, color = "white") +
  labs(x = "Reflectance",
       y = "First species",
       title = "Difference in spectral bands reflectance conditional on forest main species") +
  scale_x_continuous(expand = c(0, 0), limits = c(0, 125)) +
  scale_y_discrete(expand = expansion(mult = c(0.01, 0.25))) +
  scale_fill_manual(values = c("blue", "green", "red"), labels = c("Blue", "Green", "Red")) +
  coord_cartesian(clip = "off") +
  theme_ridges(center = T, grid = T)


# Color-blind friendly version

# Management

df_montesole_stacked %>%
  ggplot(aes(y = Management)) +
  geom_density_ridges(aes(x = Reflectance, fill = Band),
                      alpha = 0.8, color = "white") +
  labs(x = "Reflectance",
       y = "Forest management") +
  scale_x_continuous(expand = c(0, 0), limits = c(0, 180)) +
  scale_y_discrete(expand = expansion(mult = c(0.01, 0.25))) +
  scale_fill_viridis_d(option = "plasma") +
  coord_cartesian(clip = "off") +
  ggtitle("Difference in spectral bands conditional on forest management") +
  theme_ridges(center = T, grid = T)

# Species

df_montesole_stacked %>%
  ggplot(aes(y = Species)) +
  geom_density_ridges(aes(x = Reflectance, fill = Band),
                      alpha = 0.8, color = "white") +
  labs(x = "Reflectance",
       y = "First species",
       title = "Difference in spectral bands reflectance conditional on forest main species") +
  scale_x_continuous(expand = c(0, 0), limits = c(0, 125)) +
  scale_y_discrete(expand = expansion(mult = c(0.01, 0.25))) +
  scale_fill_viridis_d(option = "mako") +
  coord_cartesian(clip = "off") +
  theme_ridges(center = T, grid = T)
